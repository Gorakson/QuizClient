package edu.hm.cs.game.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.atomic.AtomicBoolean;

public class ServerConnection implements Runnable {

    private static final String QUESTION_IDENTIFIER = "Question:";
    private static final String ANSWER_IDENTIFIER = "Answer:";
    private static final String GAME_OVER_IDENTIFIER = "GameOver:";
    
    private final AtomicBoolean isGameOver;
    private final AtomicBoolean newAnswerPresent;
    private final Socket server;
    private final TextLog log;
    private String answer;
    
    /**
     * Ctor.
     */
    public ServerConnection(Socket socket, TextLog log) {       
        this.server = socket;
        this.log = log;
        isGameOver = new AtomicBoolean(false);
        newAnswerPresent = new AtomicBoolean(false);
    }
    
    @Override
    public void run() {
        new Thread( () -> {
            try (final BufferedReader input = new BufferedReader(new InputStreamReader(server.getInputStream()))) {
                String line = input.readLine();
                
                while (line != null && !isGameOver.get()) {
                    handleInput(line);
                    line = input.readLine();
                }
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }).start();
        
        while (!isGameOver.get()) {
            try (final PrintWriter writer = new PrintWriter(server.getOutputStream())) {
                synchronized (this) {
                    while (!newAnswerPresent.get() && !isGameOver.get()) {
                        wait();
                    }
                    
                    if (!isGameOver.get()) {
                        writer.write(ANSWER_IDENTIFIER + answer);
                        newAnswerPresent.set(false);
                    }
                }
                
            } catch (IOException exception) {
                exception.printStackTrace();
            } catch (InterruptedException e) {
                throw new AssertionError();
            }
        }
    }
    
    /**
     * Sends the question text to the client.
     */
    public void postAnswer(String answer) {
        if (answer == null) {
            throw new NullPointerException();
        }
        
        synchronized (this) {
            this.answer = answer;
            newAnswerPresent.set(true);
            notifyAll();
        }
    }
    
    public boolean isGameOver() {
        return isGameOver.get();
    }
    
    public void setGameOver(boolean isGameOver) {
        synchronized (this) {
            this.isGameOver.set(isGameOver);
            notifyAll();
        }
    }
    
    private void handleInput(String line) {
        if (line.startsWith(QUESTION_IDENTIFIER)) {
            log.log(LogType.Question, line.replace(QUESTION_IDENTIFIER, ""));
        } else if (line.startsWith(GAME_OVER_IDENTIFIER)) {
            log.log(LogType.Protocol, line.replace(GAME_OVER_IDENTIFIER, ""));
        } else {
            log.log(LogType.Message, line);
        }
    }
}
